var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "state", function () {
  return state;
});
_parcelHelpers.export(exports, "loadRecipe", function () {
  return loadRecipe;
});
_parcelHelpers.export(exports, "loadSearchResults", function () {
  return loadSearchResults;
});
_parcelHelpers.export(exports, "getSearchResultsPage", function () {
  return getSearchResultsPage;
});
_parcelHelpers.export(exports, "updateServings", function () {
  return updateServings;
});
_parcelHelpers.export(exports, "addBookMark", function () {
  return addBookMark;
});
_parcelHelpers.export(exports, "deleteBookMark", function () {
  return deleteBookMark;
});
_parcelHelpers.export(exports, "uploadRecipe", function () {
  return uploadRecipe;
});
var _config = require('./config');
var _helper = require('./helper');
const state = {
  recipes: {},
  search: {
    query: '',
    results: [],
    currentPage: 1,
    resultsPerPage: _config.RES_PER_PAGE
  },
  bookmarks: []
};
/**==========================================
* ******** LOAD SINGLE RECIPE DATA *********
===========================================*/
const createRecipeObject = function (data) {
  const {recipe} = data.data;
  return {
    id: recipe.id,
    title: recipe.title,
    publisher: recipe.publisher,
    sourceUrl: recipe.source_url,
    image: recipe.image_url,
    servings: recipe.servings,
    cookingTime: recipe.cooking_time,
    ingredients: recipe.ingredients,
    ...recipe.key && ({
      key: recipe.key
    })
  };
};
const loadRecipe = async function (id) {
  try {
    const data = await _helper.getJSON(`${_config.API_URL}${id}`);
    state.recipes = createRecipeObject(data);
    // for bookmark
    if (state.bookmarks.some(bookmark => bookmark.id === id)) {
      state.recipes.bookmarked = true;
    } else {
      state.recipes.bookmarked = false;
    }
  } catch (error) {
    throw error;
  }
};
const loadSearchResults = async function (query) {
  try {
    state.search.query = query;
    const data = await _helper.getJSON(`${_config.API_URL}?search=${query}`);
    state.search.results = data.data.recipes.map(rec => {
      return {
        id: rec.id,
        title: rec.title,
        publisher: rec.publisher,
        image: rec.image_url
      };
    });
    // for after load recipe should be the page 1
    state.search.currentPage = 1;
  } catch (error) {
    console.log(`${error}`);
    throw error;
  }
};
const getSearchResultsPage = function (page = state.search.currentPage) {
  state.search.currentPage = page;
  const start = (page - 1) * state.search.resultsPerPage;
  // 0
  const end = page * state.search.resultsPerPage;
  // 10
  return state.search.results.slice(start, end);
};
const updateServings = function (newServings) {
  state.recipes.ingredients.forEach(ing => {
    // newQt = oldQt * newServings / oldServings // 2 * 8 / 4 = 4
    ing.quantity = ing.quantity * newServings / state.recipes.servings;
  });
  state.recipes.servings = newServings;
};
/**==========================================
* *************** BOOKMARKS ****************
===========================================*/
const persistBookmarks = function () {
  localStorage.setItem('bookmarks', JSON.stringify(state.bookmarks));
};
const addBookMark = function (recipe) {
  // Add Bookmark
  state.bookmarks.push(recipe);
  // Mark current recipe as bookmark
  if (recipe.id === state.recipes.id) state.recipes.bookmarked = true;
  persistBookmarks();
};
const deleteBookMark = function (id) {
  // delete bookmark
  const index = state.bookmarks.findIndex(el => el.id === id);
  state.bookmarks.splice(index, 1);
  // Mark NOT current recipe as bookmark
  if (id === state.recipes.id) state.recipes.bookmarked = false;
  persistBookmarks();
};
const init = function () {
  const storage = localStorage.getItem('bookmarks');
  if (storage) state.bookmarks = JSON.parse(storage);
};
init();
// for development purpose
const clearBookmarks = function () {
  localStorage.clear('bookmarks');
};
const uploadRecipe = async function (newRecipe) {
  try {
    const ingredients = Object.entries(newRecipe).filter(entry => entry[0].startsWith('ingredient') && entry[1] !== '').map(ing => {
      const ingArr = ing[1].replaceAll(' ', '').split(',');
      if (ingArr.length !== 3) throw new Error('Wrong ingredient format! Please use the correct ingredient format');
      const [quantity, unit, description] = ingArr;
      return {
        quantity: quantity ? +quantity : null,
        unit,
        description
      };
    });
    const recipe = {
      title: newRecipe.title,
      source_url: newRecipe.sourceUrl,
      image_url: newRecipe.image,
      publisher: newRecipe.publisher,
      cooking_time: +newRecipe.cookingTime,
      servings: +newRecipe.servings,
      ingredients
    };
    const data = await _helper.sendJSON(`${_config.API_URL}?key=${_config.KEY}`, recipe);
    state.recipes = createRecipeObject(data);
    addBookMark(state.recipes);
    console.log(data);
  } catch (error) {
    throw error;
  }
};
